@using Himsug_Final4.Shared.Models


<h3>@HeaderText</h3>

<div style="width:60%">

    <EditForm Model="userinf" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="row mb-3">
            <label for="inputUName" class="col-sm-1 col-form-label">Username</label>
            <div class="col-sm-10">
                <InputText type="text" class="form-control" id="uID" @bind-Value="@userinf.Username" disabled=@ReadOnlyMode />
            <ValidationMessage For="@(() => userinf.Username)" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="inputPass" class="col-sm-1 col-form-label">Password</label>
            <div class="col-sm-10">
                <InputText type="text" class="form-control" id="uPass" @bind-Value="@userinf.Password" disabled=@ReadOnlyMode />
                <ValidationMessage For="@(() => userinf.Password)" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="inputEmadd" class="col-sm-1 col-form-label">Email Address</label>
            <div class="col-sm-10">
                <InputText type="text" class="form-control" id="uEAdd" @bind-Value="@userinf.Access_Level" disabled=@ReadOnlyMode />
                <ValidationMessage For="@(() => userinf.Access_Level)" />
            </div>
        </div>

        <a class="btn btn-check" tabindex="1" role="button" href="/userlist">Back to List</a>

        @if (!ReadOnlyMode)
        {
            <button type="submit" class="btn btn-primary">@(UserID > 0) ? "Update" : "Save"</button>
        }
    </EditForm>
            
            
        

</div>

@code {
    [Parameter] public int UserID { get; set; }
    [Parameter] public bool ReadOnlyMode { get; set; }
    [Parameter] public string HeaderText { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private Accounts userinf { get; set; } = new Accounts();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        userinf = new Accounts();
        Console.WriteLine(ReadOnlyMode);
    }
}
